https://github.com/bendike
System
	
	Network
		Send global request immediatly once recieved
			Type identifier (UP / DOWN)
			Floor 
		
		Alive message on "system tick" 
			Send entire state
			Keep structure of the map when sending, 
			Immediatly translate back when received

		Broadcast messages
			Any elevator on the network should connect

			If you don't recieve a state during alive, 
			that elevator should be "disconnected" 

			Elevator identifier
			IP address
			Port number

		Format: sending binary / string
			0: identifier for message type
			

		Incoming requests:
			:udp
				(Add new elevator) or (Old elevator still alive)
					:request_state_changes
				Ignore self calls

			:broadcast
				Broadcasts udp message to all elevators on the network
				Request another broadcast after given time
	
	States
		Use GenStateMachine? 

		Complete system state, local and network
		Local pubsub, see Request algortithm
		
		Separate?
			Data
				floor
				requests (local / hall, global / (up, down))
				other_elevators (name, state)
			
			State
				behaviour
				dir
				config
		
		
		Incoming requests:
			:event -> change data
				Command up, down
				Hall
				Obstruction?
				Stop?
			:network -> change data
				requests
				other_elevators (triggered)
			:controller -> change state / data
				dir, behaviour 		

	Events
		GenStage

		GenEvent 
			Deprecated
			:gen_event

		Registry
			Might not be too usable

		Supervisor and GenServers		
		
		GenStateMachine

		Incoming requests: 
			Nothing??
	
	Request assignment algorithm
		Pubsub
			Elixir Registry module seems to be 
			especially good for Publisher - Subscriber

		Incoming requests: 
			:timer 
				redo algorithm
				send changes to requests name of the elevator given the request
				send appropriate state changes (dir, behaviour)
			

	Testing
		ExUnit to test modules

		Selfchecking functions to give system "all clear"
